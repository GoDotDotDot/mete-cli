#!/usr/bin/env node
const { resolve, join } = require("path");
const parseArgs = require("minimist");
const chalk = require('chalk');
const signale = require('signale');
const { existsSync, mkdirSync } = require('fs'); 
const fs = require('fs-extra')
const {BUILD_DIR} = require('../lib/constants');
const webpackBuild = require('../lib/build-utils/webpack')

const argv = parseArgs(process.argv.slice(2), {
  alias: {
    h: "help",
  },
  boolean: ["h"]
});

if (argv.help) {
  console.log(`
  Description
    Compiles the application for production deployment

  Usage
    ${chalk.bgBlue('$ mete build')}

  NOTE: The compiled dist folder name is the value of output.path in the webpack config.
  `);
  process.exit(0);
}

const externalCfg = webpackBuild.getExternalConfig();
const webpackConfig = webpackBuild.loadConfig(false, externalCfg);
const foldername = webpackConfig.output.path || path.resolve(process.cwd(), BUILD_DIR);

if (existsSync(foldername)) {
  signale.warn(`Cleanning...
  `)
  fs.remove(foldername)
} else {
  signale.warn(`No such directory exists : ${foldername}, it will be created automated.`);
  signale.start(`Creatting directory: ${foldername}`);
  try{
    mkdirSync(foldername)
  } catch(err){
    signale.error(`Failed to creat at ${foldername}`);
    process.exit(1);
  }
}

const {build} = require('../lib/build-utils/webpack');
signale.await(`Buildding in to ${foldername}
`)

// "cross-env NODE_ENV=production webpack --profile --config config/webpack/webpack.prod.babel.js --color -p --progress --hide-modules --display-optimization-bailout"
build(foldername);


